// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// FormsServiceClient is the client API for FormsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FormsServiceClient interface {
	AddForm(ctx context.Context, in *AddFormRequest, opts ...grpc.CallOption) (*AddFormResponse, error)
	DeleteForm(ctx context.Context, in *DeleteFormRequest, opts ...grpc.CallOption) (*DeleteFormResponse, error)
	GetForms(ctx context.Context, in *GetFormsRequest, opts ...grpc.CallOption) (*GetFormsResponse, error)
	GetForm(ctx context.Context, in *GetFormRequest, opts ...grpc.CallOption) (*GetFormResponse, error)
	SubmitResponse(ctx context.Context, in *SubmitResponseRequest, opts ...grpc.CallOption) (*SubmitResponseResponse, error)
	GetFormResponses(ctx context.Context, in *GetFormResponsesRequest, opts ...grpc.CallOption) (*GetFormResponsesResponse, error)
	AddFormBackend(ctx context.Context, in *AddFormBackendRequest, opts ...grpc.CallOption) (*AddFormBackendResponse, error)
	GetFormBackends(ctx context.Context, in *GetFormBackendsRequest, opts ...grpc.CallOption) (*GetFormBackendsResponse, error)
}

type formsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFormsServiceClient(cc grpc.ClientConnInterface) FormsServiceClient {
	return &formsServiceClient{cc}
}

func (c *formsServiceClient) AddForm(ctx context.Context, in *AddFormRequest, opts ...grpc.CallOption) (*AddFormResponse, error) {
	out := new(AddFormResponse)
	err := c.cc.Invoke(ctx, "/FormsService/AddForm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *formsServiceClient) DeleteForm(ctx context.Context, in *DeleteFormRequest, opts ...grpc.CallOption) (*DeleteFormResponse, error) {
	out := new(DeleteFormResponse)
	err := c.cc.Invoke(ctx, "/FormsService/DeleteForm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *formsServiceClient) GetForms(ctx context.Context, in *GetFormsRequest, opts ...grpc.CallOption) (*GetFormsResponse, error) {
	out := new(GetFormsResponse)
	err := c.cc.Invoke(ctx, "/FormsService/GetForms", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *formsServiceClient) GetForm(ctx context.Context, in *GetFormRequest, opts ...grpc.CallOption) (*GetFormResponse, error) {
	out := new(GetFormResponse)
	err := c.cc.Invoke(ctx, "/FormsService/GetForm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *formsServiceClient) SubmitResponse(ctx context.Context, in *SubmitResponseRequest, opts ...grpc.CallOption) (*SubmitResponseResponse, error) {
	out := new(SubmitResponseResponse)
	err := c.cc.Invoke(ctx, "/FormsService/SubmitResponse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *formsServiceClient) GetFormResponses(ctx context.Context, in *GetFormResponsesRequest, opts ...grpc.CallOption) (*GetFormResponsesResponse, error) {
	out := new(GetFormResponsesResponse)
	err := c.cc.Invoke(ctx, "/FormsService/GetFormResponses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *formsServiceClient) AddFormBackend(ctx context.Context, in *AddFormBackendRequest, opts ...grpc.CallOption) (*AddFormBackendResponse, error) {
	out := new(AddFormBackendResponse)
	err := c.cc.Invoke(ctx, "/FormsService/AddFormBackend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *formsServiceClient) GetFormBackends(ctx context.Context, in *GetFormBackendsRequest, opts ...grpc.CallOption) (*GetFormBackendsResponse, error) {
	out := new(GetFormBackendsResponse)
	err := c.cc.Invoke(ctx, "/FormsService/GetFormBackends", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FormsServiceServer is the server API for FormsService service.
// All implementations must embed UnimplementedFormsServiceServer
// for forward compatibility
type FormsServiceServer interface {
	AddForm(context.Context, *AddFormRequest) (*AddFormResponse, error)
	DeleteForm(context.Context, *DeleteFormRequest) (*DeleteFormResponse, error)
	GetForms(context.Context, *GetFormsRequest) (*GetFormsResponse, error)
	GetForm(context.Context, *GetFormRequest) (*GetFormResponse, error)
	SubmitResponse(context.Context, *SubmitResponseRequest) (*SubmitResponseResponse, error)
	GetFormResponses(context.Context, *GetFormResponsesRequest) (*GetFormResponsesResponse, error)
	AddFormBackend(context.Context, *AddFormBackendRequest) (*AddFormBackendResponse, error)
	GetFormBackends(context.Context, *GetFormBackendsRequest) (*GetFormBackendsResponse, error)
	mustEmbedUnimplementedFormsServiceServer()
}

// UnimplementedFormsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFormsServiceServer struct {
}

func (*UnimplementedFormsServiceServer) AddForm(context.Context, *AddFormRequest) (*AddFormResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddForm not implemented")
}
func (*UnimplementedFormsServiceServer) DeleteForm(context.Context, *DeleteFormRequest) (*DeleteFormResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteForm not implemented")
}
func (*UnimplementedFormsServiceServer) GetForms(context.Context, *GetFormsRequest) (*GetFormsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetForms not implemented")
}
func (*UnimplementedFormsServiceServer) GetForm(context.Context, *GetFormRequest) (*GetFormResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetForm not implemented")
}
func (*UnimplementedFormsServiceServer) SubmitResponse(context.Context, *SubmitResponseRequest) (*SubmitResponseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitResponse not implemented")
}
func (*UnimplementedFormsServiceServer) GetFormResponses(context.Context, *GetFormResponsesRequest) (*GetFormResponsesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFormResponses not implemented")
}
func (*UnimplementedFormsServiceServer) AddFormBackend(context.Context, *AddFormBackendRequest) (*AddFormBackendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddFormBackend not implemented")
}
func (*UnimplementedFormsServiceServer) GetFormBackends(context.Context, *GetFormBackendsRequest) (*GetFormBackendsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFormBackends not implemented")
}
func (*UnimplementedFormsServiceServer) mustEmbedUnimplementedFormsServiceServer() {}

func RegisterFormsServiceServer(s *grpc.Server, srv FormsServiceServer) {
	s.RegisterService(&_FormsService_serviceDesc, srv)
}

func _FormsService_AddForm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddFormRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FormsServiceServer).AddForm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FormsService/AddForm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FormsServiceServer).AddForm(ctx, req.(*AddFormRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FormsService_DeleteForm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFormRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FormsServiceServer).DeleteForm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FormsService/DeleteForm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FormsServiceServer).DeleteForm(ctx, req.(*DeleteFormRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FormsService_GetForms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFormsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FormsServiceServer).GetForms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FormsService/GetForms",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FormsServiceServer).GetForms(ctx, req.(*GetFormsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FormsService_GetForm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFormRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FormsServiceServer).GetForm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FormsService/GetForm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FormsServiceServer).GetForm(ctx, req.(*GetFormRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FormsService_SubmitResponse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitResponseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FormsServiceServer).SubmitResponse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FormsService/SubmitResponse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FormsServiceServer).SubmitResponse(ctx, req.(*SubmitResponseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FormsService_GetFormResponses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFormResponsesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FormsServiceServer).GetFormResponses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FormsService/GetFormResponses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FormsServiceServer).GetFormResponses(ctx, req.(*GetFormResponsesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FormsService_AddFormBackend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddFormBackendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FormsServiceServer).AddFormBackend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FormsService/AddFormBackend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FormsServiceServer).AddFormBackend(ctx, req.(*AddFormBackendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FormsService_GetFormBackends_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFormBackendsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FormsServiceServer).GetFormBackends(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FormsService/GetFormBackends",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FormsServiceServer).GetFormBackends(ctx, req.(*GetFormBackendsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _FormsService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "FormsService",
	HandlerType: (*FormsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddForm",
			Handler:    _FormsService_AddForm_Handler,
		},
		{
			MethodName: "DeleteForm",
			Handler:    _FormsService_DeleteForm_Handler,
		},
		{
			MethodName: "GetForms",
			Handler:    _FormsService_GetForms_Handler,
		},
		{
			MethodName: "GetForm",
			Handler:    _FormsService_GetForm_Handler,
		},
		{
			MethodName: "SubmitResponse",
			Handler:    _FormsService_SubmitResponse_Handler,
		},
		{
			MethodName: "GetFormResponses",
			Handler:    _FormsService_GetFormResponses_Handler,
		},
		{
			MethodName: "AddFormBackend",
			Handler:    _FormsService_AddFormBackend_Handler,
		},
		{
			MethodName: "GetFormBackends",
			Handler:    _FormsService_GetFormBackends_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "transport_grpc.proto",
}
